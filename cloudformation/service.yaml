AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public Application Load Balancer.
Parameters:
  NetworkStackName:
    Type: String
    Default: prebid-network-prod
    Description: The name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  ImageUrl:
    Type: String
    Default: prebid/redirector:latest
    Description: The url of a docker image that contains the application process that
      will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 3072
      - 4096
      - 5120
      - 6144
      - 7168
      - 8192
      - 16384
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  MaxCount:
    Type: Number
    Default: 4
    Description: Maximum copies of the service task to run
  TaskExecutionRole:
    Type: String
    Default: ecsTaskExecutionRole
    Description: An IAM role to give the tasks for pulling and container images and publishing container logs to Amazon
      CloudWatch
  EcsAutoscaleRole:
    Type: String
    Default: ecsAutoscaleRole
    Description: An IAM role that authorizes Amazon ECS to use Service Auto Scaling
  LoadBalancerCertificateId:
    Type: String
    Default: ''
    Description: Id of the pre-uploaded (or pre-requested) SSL certificate from ACM (Amazon Certificate Manager).
      That is, it is a last part of the Certificate ARN, for example "arn:aws:acm:us-east-1:123456789123:certificate/>this_is_the_id<"

Conditions:
  HasLoadBalancerCertificateId: !Not [!Equals [!Ref LoadBalancerCertificateId, '']]

Resources:
  # Load Balancer
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref NetworkStackName, 'VPCId']]
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - Fn::ImportValue:
            !Join [':', [!Ref NetworkStackName, 'PublicSubnetOne']]
        - Fn::ImportValue:
            !Join [':', [!Ref NetworkStackName, 'PublicSubnetTwo']]
      SecurityGroups: [!Ref ALBSG]
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref 'AWS::StackName', 'alb']]
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      Name: !Join ['-', [!Ref 'AWS::StackName', 'tg']]
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref NetworkStackName, 'VPCId']]
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ALB
      - TargetGroup
    Properties:
      DefaultActions:
        - Type: 'fixed-response'
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 404
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  HttpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/redir'
      ListenerArn: !Ref HttpListener
      Priority: 1
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasLoadBalancerCertificateId
    DependsOn:
      - ALB
      - TargetGroup
    Properties:
      DefaultActions:
        - Type: 'fixed-response'
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 404
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Join ['', [ !Sub 'arn:aws:iam::${AWS::AccountId}:server-certificate/', !Ref LoadBalancerCertificateName]]
  HttpsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasLoadBalancerCertificateId
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/redir'
      ListenerArn: !Ref HttpsListener
      Priority: 1

  # Security Group for Fargate Tasks
  FargateContainerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref NetworkStackName, 'VPCId']]
  FargateContainerSGIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the ALB
      GroupId: !Ref FargateContainerSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ALBSG

  # Task definition
  TaskCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/ecs/', !Join ['-', [!Ref 'AWS::StackName', 'task-def']]]]
      RetentionInDays: 365

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref 'AWS::StackName', 'task-def']]
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Join ['', [ !Sub 'arn:aws:iam::${AWS::AccountId}:role/', !Ref TaskExecutionRole]]
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref 'AWS::StackName', 'container']]
          Essential: true
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskCloudWatchLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'ecs'

  # Service
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpListenerRule
    Properties:
      ServiceName: !Join ['-', [!Ref 'AWS::StackName', 'service']]
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref NetworkStackName, 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref FargateContainerSG
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref NetworkStackName, 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref NetworkStackName, 'PrivateSubnetTwo']]
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Join ['-', [!Ref 'AWS::StackName', 'container']]
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # Auto-scaling
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join
        - /
        - - service
          - Fn::ImportValue:
              !Join [':', [!Ref NetworkStackName, 'ClusterName']]
          - !GetAtt Service.Name
      RoleARN: !Join ['', [ !Sub 'arn:aws:iam::${AWS::AccountId}:role/', !Ref EcsAutoscaleRole]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['-', [!Ref 'AWS::StackName', 'scaling-policy']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        TargetValue: 80
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

Outputs:
  ExternalUrl:
    Description: The url of the load balancer
    Value: !Join ['', ['http://', !GetAtt 'ALB.DNSName']]